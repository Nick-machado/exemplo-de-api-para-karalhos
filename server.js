/**
 * server.js
 * ---------------------------------------------------------------------------
 * Ponto de entrada da aplicaÃ§Ã£o Express.
 * - Sobe o servidor HTTP.
 * - Configura middlewares globais (ex.: JSON parser).
 * - Registra as rotas da aplicaÃ§Ã£o.
 * 
 * Obs.: Mantemos este arquivo enxuto; a lÃ³gica Ã© delegada para pastas
 *       routes/, controllers/ e models/ (padrÃ£o MVC simplificado).
 */

require('dotenv').config(); // Carrega variÃ¡veis de ambiente do .env
const express = require('express');
const app = express();

/**
 * SequÃªncia (fluxo) de uma requisiÃ§Ã£o no Express
 * -------------------------------------------------------------------------
 * 1) Middlewares globais (app.use) sÃ£o executados em ordem de declaraÃ§Ã£o.
 *    - Aqui habilitamos o parser de JSON para popular req.body.
 * 2) Rotas (app.use('/prefixo', router)) sÃ£o delegadas para seus respectivos
 *    routers (ex.: routes/avisoRoutes.js).
 * 3) Caso nenhuma rota atenda a requisiÃ§Ã£o, caÃ­mos no middleware 404.
 * 4) Se algum middleware/rota chamar next(err) ou lanÃ§ar erro, o Express
 *    redireciona para o middleware de erro (o que possui 4 parÃ¢metros).
 *
 * Dica: a ordem em que vocÃª declara middlewares e rotas importa!
 */

// Middleware nativo do Express para interpretar JSON no corpo das requisiÃ§Ãµes.
// Sem isso, req.body virÃ¡ undefined para application/json.
app.use(express.json());

// Importa as rotas de "avisos" (mural).
const avisoRoutes = require('./routes/avisoRoutes');

// Prefixa as rotas de avisos em /avisos.
// Isso significa que, por exemplo, o POST para criar um aviso serÃ¡: POST /avisos
app.use('/avisos', avisoRoutes);

// (Opcional) Rota de saÃºde do serviÃ§o, Ãºtil para monitoramento.
app.get('/health', (req, res) => {
  res.json({ status: 'Rodou porra', timestamp: new Date().toISOString() });
});

// Middleware simples de tratamento de rotas inexistentes (404).
app.use((req, res, next) => {
  res.status(404).json({
    erro: 'Rota nÃ£o encontrada',
    caminho: req.originalUrl
  });
});

// Middleware simples de tratamento de erros nÃ£o capturados.
// Em produÃ§Ã£o, vocÃª poderia logar stack traces e mascarar mensagens sensÃ­veis.
app.use((err, req, res, next) => {
  console.error('[ERRO NÃƒO TRATADO]', err);
  res.status(500).json({
    erro: 'Erro interno do servidor'
  });
});

// Porta padrÃ£o 3000 (pode usar variÃ¡vel de ambiente para flexibilidade).
// Em produÃ§Ã£o, configure PORT via variÃ¡vel de ambiente (ex.: PORT=8080).
// Em desenvolvimento, 3000 Ã© um padrÃ£o conveniente.
const PORT = process.env.PORT || 3000;

// Inicia o servidor HTTP.
app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT} ðŸš€`);
});
